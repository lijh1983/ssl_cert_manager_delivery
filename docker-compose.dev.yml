# 开发环境Docker Compose覆盖配置

services:
  # 开发环境数据库配置
  postgres:
    environment:
      POSTGRES_DB: ssl_manager_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5433:5432"  # 避免与本地PostgreSQL冲突

  # 开发环境Redis配置
  redis:
    command: redis-server --appendonly yes  # 开发环境不需要密码
    ports:
      - "6380:6379"  # 避免与本地Redis冲突

  # 开发环境后端配置
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev  # 开发环境专用Dockerfile
    environment:
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
      WORKERS: 1
      
      # 开发数据库配置
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ssl_manager_dev
      DB_USER: dev_user
      DB_PASSWORD: dev_password
      
      # 开发Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # REDIS_PASSWORD: ""  # 开发环境无密码
      
      # 开发安全配置
      SECRET_KEY: dev-secret-key-not-for-production
      JWT_SECRET_KEY: dev-jwt-secret-key
      
      # 开发SSL配置
      ACME_DIRECTORY_URL: https://acme-staging-v02.api.letsencrypt.org/directory  # 使用测试环境
      
      # 开发调试配置
      DEBUG: true
      RELOAD: true
      ENABLE_CORS: true
    volumes:
      - ./backend:/app:cached  # 挂载源代码用于热重载
      - ssl_certs:/app/certs
      - app_logs:/app/logs
    ports:
      - "8001:8000"  # 开发端口
      - "9091:9090"  # 监控端口
    command: >
      sh -c "
        echo 'Starting development server...' &&
        pip install -r requirements-dev.txt &&
        uvicorn src.app:app --host 0.0.0.0 --port 8000 --reload --log-level debug
      "

  # 开发环境前端配置
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev  # 开发环境专用Dockerfile
      args:
        NODE_ENV: development
        VITE_API_BASE_URL: http://localhost:8001/api
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: http://localhost:8001/api
      VITE_WS_URL: ws://localhost:8001/ws
    volumes:
      - ./frontend:/app:cached  # 挂载源代码用于热重载
      - /app/node_modules  # 避免覆盖node_modules
    ports:
      - "3001:3000"  # 开发端口
    command: npm run dev -- --host 0.0.0.0 --port 3000

  # 开发环境不需要生产级nginx
  nginx:
    profiles:
      - production-only

  # 开发环境监控配置
  prometheus:
    volumes:
      - ./monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9092:9090"

  grafana:
    environment:
      GF_SECURITY_ADMIN_USER: dev
      GF_SECURITY_ADMIN_PASSWORD: dev
      GF_USERS_ALLOW_SIGN_UP: true
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
    ports:
      - "3001:3000"

  # 开发环境数据库管理工具
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ssl-manager-pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - ./development/pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      ssl-manager-network:
        ipv4_address: 172.20.0.70
    depends_on:
      - postgres

  # 开发环境Redis管理工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ssl-manager-redis-commander-dev
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      ssl-manager-network:
        ipv4_address: 172.20.0.71
    depends_on:
      - redis

  # 开发环境邮件测试服务
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ssl-manager-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP端口
      - "8025:8025"  # Web界面端口
    networks:
      ssl-manager-network:
        ipv4_address: 172.20.0.72

# 开发环境专用数据卷
volumes:
  dev_postgres_data:
    driver: local
  dev_redis_data:
    driver: local
