version: '3.8'

services:
  # MySQL 8.0.41 数据库服务（生产环境）
  mysql:
    image: mysql:8.0.41
    container_name: ssl_manager_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_CHARSET: ${MYSQL_CHARSET:-utf8mb4}
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
      - ./mysql/logs:/var/log/mysql
      - ./mysql/ssl:/etc/mysql/ssl:ro
      - ./backend/database/init_mysql.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=${MYSQL_INNODB_BUFFER_POOL_SIZE:-512M}
      --innodb-log-file-size=${MYSQL_INNODB_LOG_FILE_SIZE:-128M}
      --innodb-flush-log-at-trx-commit=2
      --innodb-flush-method=O_DIRECT
      --max-connections=${MYSQL_MAX_CONNECTIONS:-200}
      --query-cache-type=1
      --query-cache-size=${MYSQL_QUERY_CACHE_SIZE:-64M}
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2
      --log-error=/var/log/mysql/error.log
      --general-log=0
      --ssl-ca=/etc/mysql/ssl/ca.pem
      --ssl-cert=/etc/mysql/ssl/server-cert.pem
      --ssl-key=/etc/mysql/ssl/server-key.pem
    networks:
      - ssl_manager_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # SSL证书管理后端服务（多实例负载均衡）
  backend1:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: ssl_manager_backend1_prod
    restart: unless-stopped
    environment:
      # MySQL数据库配置
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_CHARSET: ${MYSQL_CHARSET:-utf8mb4}
      MYSQL_POOL_SIZE: ${MYSQL_POOL_SIZE:-20}
      MYSQL_MAX_OVERFLOW: ${MYSQL_MAX_OVERFLOW:-30}
      MYSQL_POOL_TIMEOUT: ${MYSQL_POOL_TIMEOUT:-30}
      MYSQL_POOL_RECYCLE: ${MYSQL_POOL_RECYCLE:-3600}
      MYSQL_SSL_DISABLED: ${MYSQL_SSL_DISABLED:-false}
      MYSQL_SSL_CA: ${MYSQL_SSL_CA}
      MYSQL_SSL_CERT: ${MYSQL_SSL_CERT}
      MYSQL_SSL_KEY: ${MYSQL_SSL_KEY}
      
      # Flask应用配置
      FLASK_ENV: production
      FLASK_DEBUG: false
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      CSRF_SECRET_KEY: ${CSRF_SECRET_KEY}
      
      # 其他配置
      CERT_STORAGE_PATH: /app/certs
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: /app/logs/ssl_manager.log
      
      # 实例标识
      INSTANCE_ID: backend1
    volumes:
      - cert_storage:/app/certs
      - backend_logs:/app/logs
      - ./backend/config:/app/config:ro
      - ./ssl:/app/ssl:ro
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ssl_manager_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  backend2:
    extends:
      service: backend1
    container_name: ssl_manager_backend2_prod
    environment:
      INSTANCE_ID: backend2

  backend3:
    extends:
      service: backend1
    container_name: ssl_manager_backend3_prod
    environment:
      INSTANCE_ID: backend3

  # SSL证书管理前端服务（多实例）
  frontend1:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: ssl_manager_frontend1_prod
    restart: unless-stopped
    environment:
      VUE_APP_API_BASE_URL: ${API_BASE_URL}
      VUE_APP_TITLE: ${VUE_APP_TITLE:-SSL证书管理系统}
      VUE_APP_VERSION: ${VUE_APP_VERSION:-1.0.0}
      NODE_ENV: production
    networks:
      - ssl_manager_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      timeout: 10s
      retries: 3
      interval: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  frontend2:
    extends:
      service: frontend1
    container_name: ssl_manager_frontend2_prod

  # Nginx负载均衡器和反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: ssl_manager_nginx_prod
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
      - "8080:8080"  # 健康检查端口
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/cache:/var/cache/nginx
      - ./frontend/dist:/var/www/ssl-manager:ro
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro
      - nginx_cache:/var/cache/nginx
    environment:
      NGINX_ENVSUBST_TEMPLATE_DIR: /etc/nginx/templates
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: .template
      DOMAIN_NAME: ${DOMAIN_NAME}
    depends_on:
      - backend1
      - backend2
      - backend3
      - frontend1
      - frontend2
    networks:
      - ssl_manager_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      timeout: 5s
      retries: 3
      interval: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis缓存服务（生产环境）
  redis:
    image: redis:7.2-alpine
    container_name: ssl_manager_redis_prod
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ssl_manager_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 3s
      retries: 5
      interval: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: ssl_manager_prometheus_prod
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ssl_manager_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: ssl_manager_grafana_prod
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ssl_manager_network
    profiles:
      - monitoring

  # 日志收集服务（可选）
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: ssl_manager_filebeat_prod
    restart: unless-stopped
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - backend_logs:/var/log/ssl-manager:ro
      - nginx_logs:/var/log/nginx:ro
    environment:
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOSTS}
      KIBANA_HOST: ${KIBANA_HOST}
    networks:
      - ssl_manager_network
    profiles:
      - logging

volumes:
  mysql_data:
    driver: local
  cert_storage:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  nginx_cache:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ssl_manager_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: ssl_manager_br0
