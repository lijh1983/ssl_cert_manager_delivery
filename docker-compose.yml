# SSL证书管理系统 - Docker Compose配置

# 数据卷配置
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  ssl_certs:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0.41
    container_name: ssl-manager-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-ssl_manager_root_password}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-ssl_manager}
      MYSQL_USER: ${MYSQL_USER:-ssl_manager}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-ssl_manager_password}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/database/init_mysql.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
      - ./mysql/logs:/var/log/mysql
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --sql-mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER:-ssl_manager}", "-p${MYSQL_PASSWORD:-ssl_manager_password}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ssl-manager-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 后端API服务
  backend:
    image: ssl-manager-backend:latest
    container_name: ssl-manager-backend
    restart: unless-stopped
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      WORKERS: ${BACKEND_WORKERS:-2}
      
      # 数据库配置
      MYSQL_HOST: mysql
      MYSQL_PORT: "3306"
      MYSQL_DATABASE: ${MYSQL_DATABASE:-ssl_manager}
      MYSQL_USER: ${MYSQL_USER:-ssl_manager}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-ssl_manager_password}

      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      
      # 安全配置
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key}
      
      # SSL配置
      SSL_CERT_PATH: /app/certs
      ACME_DIRECTORY_URL: ${ACME_DIRECTORY_URL:-https://acme-v02.api.letsencrypt.org/directory}
      
      # 监控配置
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      METRICS_PORT: 9090
    volumes:
      - ssl_certs:/app/certs
      - app_logs:/app/logs
      - ./backend/config:/app/config:ro
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 前端Web服务
  frontend:
    image: ssl-manager-frontend:latest
    container_name: ssl-manager-frontend
    restart: unless-stopped
    volumes:
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx反向代理（生产环境）
  nginx:
    image: ssl-manager-nginx-proxy:latest
    container_name: ssl-manager-nginx
    restart: unless-stopped
    volumes:
      - nginx_logs:/var/log/nginx
      - ssl_certs:/var/www/ssl-certs:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 3s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - production



  # 日志收集器（可选）
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: ssl-manager-fluentd
    restart: unless-stopped
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
    ports:
      - "${FLUENTD_PORT:-24224}:24224"
    profiles:
      - logging


