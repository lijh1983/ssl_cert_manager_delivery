# 阿里云优化版Docker Compose配置

# 网络配置
networks:
  ssl-manager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ssl_certs:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  nginx_proxy_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # PostgreSQL数据库 - 使用官方镜像配合阿里云镜像加速器
  postgres:
    image: postgres:15-alpine
    container_name: ssl-manager-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-ssl_manager}
      POSTGRES_USER: ${DB_USER:-ssl_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ssl_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      ssl-manager-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ssl_user -d ssl_manager"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    # 临时移除资源限制以解决cgroup配置问题
    # deploy:
    #   resources:
    #     limits:
    #       memory: 1G
    #       cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis缓存 - 使用官方镜像
  redis:
    image: redis:7-alpine
    container_name: ssl-manager-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      ssl-manager-network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    # 临时移除资源限制以解决cgroup配置问题
    # deploy:
    #   resources:
    #     limits:
    #       memory: 512M
    #       cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 后端API服务 - 使用预构建镜像
  backend:
    image: ssl-manager-backend:latest
    container_name: ssl-manager-backend
    restart: unless-stopped
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      WORKERS: ${BACKEND_WORKERS:-2}
      
      # 数据库配置
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-ssl_manager}
      DB_USER: ${DB_USER:-ssl_user}
      DB_PASSWORD: ${DB_PASSWORD:-ssl_password}
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      
      # 安全配置
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key}
      
      # SSL配置
      SSL_CERT_PATH: /app/certs
      ACME_DIRECTORY_URL: ${ACME_DIRECTORY_URL:-https://acme-v02.api.letsencrypt.org/directory}
      
      # 监控配置
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      METRICS_PORT: 9090
    volumes:
      - ssl_certs:/app/certs
      - app_logs:/app/logs
    # 移除端口映射，通过反向代理访问
    # ports:
    #   - "${BACKEND_PORT:-8000}:8000"
    #   - "${METRICS_PORT:-9090}:9090"
    networks:
      ssl-manager-network:
        ipv4_address: 172.20.0.20
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # 临时移除资源限制以解决cgroup配置问题
    # deploy:
    #   resources:
    #     limits:
    #       memory: 1G
    #       cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 前端Web服务 - 使用预构建镜像
  frontend:
    image: ssl-manager-frontend:latest
    container_name: ssl-manager-frontend
    restart: unless-stopped
    volumes:
      - nginx_logs:/var/log/nginx
    # 移除端口映射，通过反向代理访问
    # ports:
    #   - "${FRONTEND_PORT:-80}:80"
    networks:
      ssl-manager-network:
        ipv4_address: 172.20.0.30
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    # 临时移除资源限制以解决cgroup配置问题
    # deploy:
    #   resources:
    #     limits:
    #       memory: 256M
    #       cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx反向代理服务
  nginx-proxy:
    image: ssl-manager-nginx-proxy:latest
    container_name: ssl-manager-nginx-proxy
    restart: unless-stopped
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME:-ssl.gzyggl.com}
      TZ: Asia/Shanghai
    volumes:
      - nginx_proxy_logs:/var/log/nginx
      - ssl_certs:/etc/nginx/ssl
      # 只挂载开发环境配置文件，避免SSL证书配置冲突
      - ./nginx/conf.d/ssl-manager-dev.conf:/etc/nginx/conf.d/ssl-manager-dev.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      ssl-manager-network:
        ipv4_address: 172.20.0.40
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    # 临时移除资源限制以解决cgroup配置问题
    # deploy:
    #   resources:
    #     limits:
    #       memory: 256M
    #       cpus: '0.25'
    #     reservations:
    #       memory: 128M
    #       cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus监控 - 使用官方镜像配合阿里云镜像加速器
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ssl-manager-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      ssl-manager-network:
        ipv4_address: 172.20.0.50
    # 临时移除资源限制以解决cgroup配置问题
    # deploy:
    #   resources:
    #     limits:
    #       memory: 512M
    #       cpus: '0.25'
    profiles:
      - monitoring

  # Grafana可视化 - 使用官方镜像配合阿里云镜像加速器
  grafana:
    image: grafana/grafana:10.0.0
    container_name: ssl-manager-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      # 配置子路径访问
      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:%(http_port)s/monitoring/"
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    # 移除端口映射，通过反向代理访问
    # ports:
    #   - "${GRAFANA_PORT:-3000}:3000"
    networks:
      ssl-manager-network:
        ipv4_address: 172.20.0.51
    depends_on:
      - prometheus
    # 临时移除资源限制以解决cgroup配置问题
    # deploy:
    #   resources:
    #     limits:
    #       memory: 256M
    #       cpus: '0.25'
    profiles:
      - monitoring
