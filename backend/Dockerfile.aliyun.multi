# 阿里云多镜像源备选版后端Dockerfile
# 支持多种基础镜像源的自动切换

# 阶段1: 基础镜像（多源备选）
# 优先级顺序：官方镜像 > 阿里云ACS > 中科大镜像 > Docker代理
ARG BASE_IMAGE=python:3.10-slim
FROM ${BASE_IMAGE} AS base

# 设置环境变量
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple \
    PIP_TRUSTED_HOST=pypi.tuna.tsinghua.edu.cn

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 配置阿里云软件源（如果是Debian/Ubuntu基础镜像）
RUN if [ -f /etc/apt/sources.list ]; then \
        sed -i 's/deb.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list && \
        sed -i 's/security.debian.org/mirrors.aliyun.com/g' /etc/apt/sources.list; \
    fi

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gcc \
    g++ \
    make \
    libffi-dev \
    libssl-dev \
    libpq-dev \
    netcat-traditional \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 阶段2: 依赖安装
FROM base AS dependencies

# 设置工作目录
WORKDIR /app

# 升级pip并配置镜像源
RUN pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple

# 复制requirements文件
COPY requirements.txt .

# 创建优化的requirements文件（添加阿里云镜像源）
RUN echo "-i https://pypi.tuna.tsinghua.edu.cn/simple" > requirements-aliyun.txt \
    && echo "--trusted-host pypi.tuna.tsinghua.edu.cn" >> requirements-aliyun.txt \
    && echo "--timeout 120" >> requirements-aliyun.txt \
    && cat requirements.txt >> requirements-aliyun.txt

# 安装Python依赖（使用阿里云镜像源，带重试机制）
RUN for i in 1 2 3; do \
        pip install --no-cache-dir -r requirements-aliyun.txt && break || \
        (echo "Attempt $i failed, retrying..." && sleep 5); \
    done

# 阶段3: 生产镜像
FROM base AS production

# 创建应用用户
RUN groupadd -r appuser && useradd -r -g appuser appuser

# 设置工作目录
WORKDIR /app

# 从依赖阶段复制已安装的包
COPY --from=dependencies /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages
COPY --from=dependencies /usr/local/bin /usr/local/bin

# 复制应用代码
COPY . .

# 创建必要的目录
RUN mkdir -p /app/logs /app/data /app/certs /app/backups \
    && chown -R appuser:appuser /app

# 创建健康检查脚本
RUN echo '#!/bin/bash' > /usr/local/bin/health-check.sh && \
    echo 'curl -f http://localhost:8000/health || exit 1' >> /usr/local/bin/health-check.sh && \
    chmod +x /usr/local/bin/health-check.sh

# 创建优化的启动脚本
RUN echo '#!/bin/bash' > /usr/local/bin/start.sh && \
    echo 'set -e' >> /usr/local/bin/start.sh && \
    echo '' >> /usr/local/bin/start.sh && \
    echo '# 显示环境信息' >> /usr/local/bin/start.sh && \
    echo 'echo "=== SSL Certificate Manager Backend ==="' >> /usr/local/bin/start.sh && \
    echo 'echo "Python version: $(python --version)"' >> /usr/local/bin/start.sh && \
    echo 'echo "Environment: ${ENVIRONMENT:-production}"' >> /usr/local/bin/start.sh && \
    echo 'echo "Workers: ${WORKERS:-2}"' >> /usr/local/bin/start.sh && \
    echo 'echo "Database: ${DB_HOST:-localhost}:${DB_PORT:-5432}"' >> /usr/local/bin/start.sh && \
    echo 'echo "Redis: ${REDIS_HOST:-localhost}:${REDIS_PORT:-6379}"' >> /usr/local/bin/start.sh && \
    echo 'echo "======================================="' >> /usr/local/bin/start.sh && \
    echo '' >> /usr/local/bin/start.sh && \
    echo '# 等待数据库就绪' >> /usr/local/bin/start.sh && \
    echo 'echo "Waiting for database..."' >> /usr/local/bin/start.sh && \
    echo 'timeout=60' >> /usr/local/bin/start.sh && \
    echo 'while ! nc -z ${DB_HOST:-localhost} ${DB_PORT:-5432}; do' >> /usr/local/bin/start.sh && \
    echo '  sleep 1' >> /usr/local/bin/start.sh && \
    echo '  timeout=$((timeout-1))' >> /usr/local/bin/start.sh && \
    echo '  if [ $timeout -eq 0 ]; then' >> /usr/local/bin/start.sh && \
    echo '    echo "Database connection timeout"' >> /usr/local/bin/start.sh && \
    echo '    exit 1' >> /usr/local/bin/start.sh && \
    echo '  fi' >> /usr/local/bin/start.sh && \
    echo 'done' >> /usr/local/bin/start.sh && \
    echo 'echo "Database is ready!"' >> /usr/local/bin/start.sh && \
    echo '' >> /usr/local/bin/start.sh && \
    echo '# 等待Redis就绪' >> /usr/local/bin/start.sh && \
    echo 'echo "Waiting for Redis..."' >> /usr/local/bin/start.sh && \
    echo 'timeout=30' >> /usr/local/bin/start.sh && \
    echo 'while ! nc -z ${REDIS_HOST:-localhost} ${REDIS_PORT:-6379}; do' >> /usr/local/bin/start.sh && \
    echo '  sleep 1' >> /usr/local/bin/start.sh && \
    echo '  timeout=$((timeout-1))' >> /usr/local/bin/start.sh && \
    echo '  if [ $timeout -eq 0 ]; then' >> /usr/local/bin/start.sh && \
    echo '    echo "Redis connection timeout"' >> /usr/local/bin/start.sh && \
    echo '    exit 1' >> /usr/local/bin/start.sh && \
    echo '  fi' >> /usr/local/bin/start.sh && \
    echo 'done' >> /usr/local/bin/start.sh && \
    echo 'echo "Redis is ready!"' >> /usr/local/bin/start.sh && \
    echo '' >> /usr/local/bin/start.sh && \
    echo '# 运行数据库迁移' >> /usr/local/bin/start.sh && \
    echo 'echo "Running database migrations..."' >> /usr/local/bin/start.sh && \
    echo 'python src/models/database.py' >> /usr/local/bin/start.sh && \
    echo '' >> /usr/local/bin/start.sh && \
    echo '# 启动应用' >> /usr/local/bin/start.sh && \
    echo 'echo "Starting application..."' >> /usr/local/bin/start.sh && \
    echo 'exec gunicorn --bind 0.0.0.0:8000 --workers ${WORKERS:-2} --worker-class gevent --worker-connections 1000 --timeout 120 --keepalive 5 --max-requests 1000 --max-requests-jitter 100 --preload src.app:app' >> /usr/local/bin/start.sh && \
    chmod +x /usr/local/bin/start.sh

# 切换到应用用户
USER appuser

# 暴露端口
EXPOSE 8000

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /usr/local/bin/health-check.sh

# 设置默认环境变量
ENV ENVIRONMENT=production \
    LOG_LEVEL=INFO \
    WORKERS=2 \
    DB_HOST=postgres \
    DB_PORT=5432 \
    DB_NAME=ssl_manager \
    DB_USER=ssl_user \
    REDIS_HOST=redis \
    REDIS_PORT=6379

# 启动命令
CMD ["/usr/local/bin/start.sh"]

# 标签信息
LABEL maintainer="SSL Certificate Manager Team" \
      version="1.0.0" \
      description="SSL Certificate Manager Backend API (Aliyun Multi-Source Optimized)" \
      org.opencontainers.image.source="https://github.com/lijh1983/ssl_cert_manager_delivery"
