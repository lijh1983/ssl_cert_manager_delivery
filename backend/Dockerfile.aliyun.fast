# 阿里云超快速构建版后端Dockerfile
# 专门针对中国大陆网络环境优化，大幅提升构建速度

# 使用官方Python镜像
FROM python:3.10-slim AS base

# 设置环境变量
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive \
    TZ=Asia/Shanghai

# 设置时区
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 配置阿里云软件源（关键优化：大幅提升下载速度）
RUN echo "=== 配置阿里云软件源 ===" && \
    # 备份原始配置
    cp /etc/apt/sources.list /etc/apt/sources.list.backup 2>/dev/null || true && \
    # 配置阿里云Debian 12 (bookworm) 镜像源
    cat > /etc/apt/sources.list <<EOF && \
# 阿里云Debian镜像源 - 大幅提升下载速度
deb https://mirrors.aliyun.com/debian/ bookworm main contrib non-free non-free-firmware
deb https://mirrors.aliyun.com/debian/ bookworm-updates main contrib non-free non-free-firmware
deb https://mirrors.aliyun.com/debian/ bookworm-backports main contrib non-free non-free-firmware
deb https://mirrors.aliyun.com/debian-security/ bookworm-security main contrib non-free non-free-firmware
EOF
    echo "阿里云软件源配置完成"

# 配置APT加速参数
RUN echo "=== 配置APT加速参数 ===" && \
    echo 'Acquire::http::Timeout "30";' > /etc/apt/apt.conf.d/99timeout && \
    echo 'Acquire::ftp::Timeout "30";' >> /etc/apt/apt.conf.d/99timeout && \
    echo 'Acquire::Retries "3";' >> /etc/apt/apt.conf.d/99timeout && \
    echo 'APT::Get::Assume-Yes "true";' >> /etc/apt/apt.conf.d/99timeout && \
    echo 'APT::Install-Recommends "false";' >> /etc/apt/apt.conf.d/99timeout && \
    echo 'APT::Install-Suggests "false";' >> /etc/apt/apt.conf.d/99timeout && \
    echo "APT加速参数配置完成"

# 更新软件包列表（使用阿里云镜像源）
RUN echo "=== 更新软件包列表 ===" && \
    apt-get update && \
    echo "软件包列表更新完成"

# 安装系统依赖（分批安装，提高成功率）
RUN echo "=== 安装基础工具 ===" && \
    apt-get install -y \
        curl \
        wget \
        ca-certificates \
        gnupg \
        lsb-release && \
    echo "基础工具安装完成"

RUN echo "=== 安装编译工具 ===" && \
    apt-get install -y \
        gcc \
        g++ \
        make \
        build-essential \
        pkg-config && \
    echo "编译工具安装完成"

RUN echo "=== 安装开发库 ===" && \
    apt-get install -y \
        libffi-dev \
        libssl-dev \
        libpq-dev \
        python3-dev \
        netcat-traditional && \
    echo "开发库安装完成"

# 清理APT缓存
RUN echo "=== 清理APT缓存 ===" && \
    apt-get autoremove -y && \
    apt-get autoclean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /tmp/* && \
    rm -rf /var/tmp/* && \
    echo "APT缓存清理完成"

# 配置pip使用阿里云镜像源
RUN echo "=== 配置pip镜像源 ===" && \
    mkdir -p /root/.pip && \
    cat > /root/.pip/pip.conf <<EOF && \
[global]
index-url = https://mirrors.aliyun.com/pypi/simple/
trusted-host = mirrors.aliyun.com
timeout = 120
retries = 3
EOF
    echo "pip镜像源配置完成"

# 升级pip
RUN echo "=== 升级pip ===" && \
    python -m pip install --upgrade pip && \
    echo "pip升级完成"

# 设置工作目录
WORKDIR /app

# 复制requirements文件
COPY requirements.txt .

# 创建优化的requirements安装脚本
RUN echo "=== 创建requirements安装脚本 ===" && \
    cat > install_requirements.sh <<'EOF' && \
#!/bin/bash
set -e

echo "开始安装Python依赖包..."

# 使用阿里云镜像源安装依赖
pip install --no-cache-dir \
    -i https://mirrors.aliyun.com/pypi/simple/ \
    --trusted-host mirrors.aliyun.com \
    --timeout 120 \
    --retries 3 \
    -r requirements.txt

echo "Python依赖包安装完成"
EOF
    chmod +x install_requirements.sh && \
    echo "requirements安装脚本创建完成"

# 安装Python依赖
RUN echo "=== 安装Python依赖 ===" && \
    ./install_requirements.sh && \
    rm install_requirements.sh && \
    echo "Python依赖安装完成"

# 复制应用代码
COPY . .

# 创建应用用户
RUN echo "=== 创建应用用户 ===" && \
    groupadd -r appuser && \
    useradd -r -g appuser appuser && \
    echo "应用用户创建完成"

# 创建必要的目录
RUN echo "=== 创建应用目录 ===" && \
    mkdir -p /app/logs /app/data /app/certs /app/backups && \
    chown -R appuser:appuser /app && \
    echo "应用目录创建完成"

# 创建健康检查脚本
RUN echo "=== 创建健康检查脚本 ===" && \
    cat > /usr/local/bin/health-check.sh <<'EOF' && \
#!/bin/bash
curl -f http://localhost:8000/health || exit 1
EOF
    chmod +x /usr/local/bin/health-check.sh && \
    echo "健康检查脚本创建完成"

# 创建启动脚本
RUN echo "=== 创建启动脚本 ===" && \
    cat > /usr/local/bin/start.sh <<'EOF' && \
#!/bin/bash
set -e

echo "=== SSL Certificate Manager Backend ==="
echo "Python version: $(python --version)"
echo "Environment: ${ENVIRONMENT:-production}"
echo "Workers: ${WORKERS:-2}"
echo "Database: ${DB_HOST:-localhost}:${DB_PORT:-5432}"
echo "Redis: ${REDIS_HOST:-localhost}:${REDIS_PORT:-6379}"
echo "======================================="

# 等待数据库就绪
echo "Waiting for database..."
timeout=60
while ! nc -z ${DB_HOST:-localhost} ${DB_PORT:-5432}; do
  sleep 1
  timeout=$((timeout-1))
  if [ $timeout -eq 0 ]; then
    echo "Database connection timeout"
    exit 1
  fi
done
echo "Database is ready!"

# 等待Redis就绪
echo "Waiting for Redis..."
timeout=30
while ! nc -z ${REDIS_HOST:-localhost} ${REDIS_PORT:-6379}; do
  sleep 1
  timeout=$((timeout-1))
  if [ $timeout -eq 0 ]; then
    echo "Redis connection timeout"
    exit 1
  fi
done
echo "Redis is ready!"

# 运行数据库迁移
echo "Running database migrations..."
python src/models/database.py

# 启动应用
echo "Starting application..."
exec gunicorn \
    --bind 0.0.0.0:8000 \
    --workers ${WORKERS:-2} \
    --worker-class gevent \
    --worker-connections 1000 \
    --timeout 120 \
    --keepalive 5 \
    --max-requests 1000 \
    --max-requests-jitter 100 \
    --preload \
    src.app:app
EOF
    chmod +x /usr/local/bin/start.sh && \
    echo "启动脚本创建完成"

# 切换到应用用户
USER appuser

# 暴露端口
EXPOSE 8000

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /usr/local/bin/health-check.sh

# 设置默认环境变量
ENV ENVIRONMENT=production \
    LOG_LEVEL=INFO \
    WORKERS=2 \
    DB_HOST=postgres \
    DB_PORT=5432 \
    DB_NAME=ssl_manager \
    DB_USER=ssl_user \
    REDIS_HOST=redis \
    REDIS_PORT=6379

# 启动命令
CMD ["/usr/local/bin/start.sh"]

# 标签信息
LABEL maintainer="SSL Certificate Manager Team" \
      version="1.0.0" \
      description="SSL Certificate Manager Backend API (Aliyun Fast Build)" \
      org.opencontainers.image.source="https://github.com/lijh1983/ssl_cert_manager_delivery" \
      build.optimization="aliyun-fast"
