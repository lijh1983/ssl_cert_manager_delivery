# SSL证书管理系统 - 本地部署配置
# 使用预构建镜像，专为本地开发/测试环境优化
# 使用方式: docker-compose -f docker-compose.local.yml up -d

version: '3.8'

# 数据卷配置
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ssl_certs:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

# 网络配置
networks:
  ssl-manager-network:
    driver: bridge

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: ssl-manager-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-ssl_manager}
      POSTGRES_USER: ${DB_USER:-ssl_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ssl_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - ssl-manager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ssl_user} -d ${DB_NAME:-ssl_manager}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ssl-manager-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - ssl-manager-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 后端API服务
  backend:
    image: ssl-manager-backend:latest
    container_name: ssl-manager-backend
    restart: unless-stopped
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      WORKERS: ${BACKEND_WORKERS:-2}
      
      # 数据库配置
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_NAME: ${DB_NAME:-ssl_manager}
      DB_USER: ${DB_USER:-ssl_user}
      DB_PASSWORD: ${DB_PASSWORD:-ssl_password}

      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      
      # 安全配置
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-key}
      
      # SSL配置
      SSL_CERT_PATH: /app/certs
      ACME_DIRECTORY_URL: ${ACME_DIRECTORY_URL:-https://acme-staging-v02.api.letsencrypt.org/directory}
      
      # 监控配置
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      METRICS_PORT: 9090
      
      # 开发配置
      DEBUG: ${DEBUG:-false}
      ENABLE_CORS: ${ENABLE_CORS:-true}
    volumes:
      - ssl_certs:/app/certs
      - app_logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - ssl-manager-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 前端Web服务
  frontend:
    image: ssl-manager-frontend:latest
    container_name: ssl-manager-frontend
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-/api}
    volumes:
      - nginx_logs:/var/log/nginx
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - ssl-manager-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx反向代理
  nginx:
    image: ssl-manager-nginx-proxy:latest
    container_name: ssl-manager-nginx
    restart: unless-stopped
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
    volumes:
      - nginx_logs:/var/log/nginx
      - ssl_certs:/var/www/ssl-certs:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - ssl-manager-network
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
