# 生产环境Docker Compose覆盖配置

services:
  # 生产环境数据库配置
  postgres:
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./backups/postgres:/backups
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    # 临时禁用资源限制以解决cgroup v2兼容性问题
    # deploy:
    #   resources:
    #     limits:
    #       memory: 2G
    #       cpus: '1.0'
    #     reservations:
    #       memory: 1G
    #       cpus: '0.5'

  # 生产环境Redis配置
  redis:
    restart: always
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./backups/redis:/backups
    # 临时禁用资源限制以解决cgroup v2兼容性问题
    # deploy:
    #   resources:
    #     limits:
    #       memory: 512M
    #       cpus: '0.5'
    #     reservations:
    #       memory: 256M
    #       cpus: '0.25'

  # 生产环境后端配置
  backend:
    restart: always
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      WORKERS: ${BACKEND_WORKERS:-2}
      
      # 生产数据库配置
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}

      # 生产Redis配置
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # 生产安全配置
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      
      # SSL配置
      SSL_CERT_PATH: /app/certs
      ACME_DIRECTORY_URL: ${ACME_DIRECTORY_URL}
      ACME_EMAIL: ${ACME_EMAIL}
      
      # 监控配置
      ENABLE_METRICS: true
      METRICS_PORT: 9090
      
      # 性能配置
      GUNICORN_WORKERS: ${BACKEND_WORKERS:-2}
      GUNICORN_WORKER_CLASS: uvicorn.workers.UvicornWorker
      GUNICORN_MAX_REQUESTS: 1000
      GUNICORN_MAX_REQUESTS_JITTER: 100
      GUNICORN_PRELOAD_APP: true
      GUNICORN_KEEPALIVE: 5
    volumes:
      - ssl_certs:/app/certs
      - app_logs:/app/logs
      - ./backups/app:/app/backups
      - ./config/production:/app/config:ro
    # 临时禁用资源限制以解决cgroup v2兼容性问题
    # deploy:
    #   resources:
    #     limits:
    #       memory: 1G
    #       cpus: '1.0'
    #     reservations:
    #       memory: 512M
    #       cpus: '0.5'
    #   restart_policy:
    #     condition: on-failure
    #     delay: 5s
    #     max_attempts: 3
    #     window: 120s

  # 生产环境前端配置
  frontend:
    restart: always
    volumes:
      - nginx_logs:/var/log/nginx
    ports: []  # 移除端口映射，只通过nginx反向代理访问
    # deploy:
      # resources:
        # limits:
          # memory: 256M
          # cpus: '0.5'
        # reservations:
          # memory: 128M
          # cpus: '0.25'

  # 生产环境Nginx（启用）
  nginx:
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/ssl-manager-simple.conf:/etc/nginx/conf.d/ssl-manager.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - ssl_certs:/var/www/ssl-certs:ro
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
    # deploy:
      # resources:
        # limits:
          # memory: 512M
          # cpus: '0.5'
        # reservations:
          # memory: 256M
          # cpus: '0.25'
    profiles: []  # 移除profile限制，在生产环境中启用

  # 生产环境监控服务
  prometheus:
    restart: always
    volumes:
      - ./monitoring/prometheus-simple.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    # deploy:
      # resources:
        # limits:
          # memory: 1G
          # cpus: '0.5'
        # reservations:
          # memory: 512M
          # cpus: '0.25'
    profiles: []  # 在生产环境中启用

  grafana:
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ALLOW_EMBEDDING: false
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_COOKIE_SAMESITE: strict
      GF_SERVER_ROOT_URL: https://${DOMAIN_NAME}/grafana/
      GF_SERVER_SERVE_FROM_SUB_PATH: true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/plugins:/var/lib/grafana/plugins
    # deploy:
      # resources:
        # limits:
          # memory: 512M
          # cpus: '0.5'
        # reservations:
          # memory: 256M
          # cpus: '0.25'
    profiles: []  # 在生产环境中启用

  # 添加额外的监控组件
  node-exporter:
    # 使用官方镜像，稳定可靠
    image: prom/node-exporter:latest
    container_name: ssl-manager-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    # deploy:
      # resources:
        # limits:
          # memory: 128M
          # cpus: '0.25'

  # cAdvisor容器监控服务已移除
  # 原因: cgroup v2兼容性问题和资源占用考虑
  # 替代方案: 使用node-exporter和docker stats进行基础监控

  # 备份服务
  backup:
    image: alpine:latest
    container_name: ssl-manager-backup
    restart: "no"
    volumes:
      - postgres_data:/backup/postgres:ro
      - redis_data:/backup/redis:ro
      - ssl_certs:/backup/certs:ro
      - app_logs:/backup/logs:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /backup.sh
    profiles:
      - backup

# 生产环境网络配置 - 使用默认网络避免冲突
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 10.10.10.0/24
#           gateway: 10.10.10.1
#     driver_opts:
#       com.docker.network.bridge.name: ssl-manager-br
#       com.docker.network.driver.mtu: 1500

# 生产环境数据卷配置
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ssl-manager/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ssl-manager/data/redis
  ssl_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ssl-manager/certs
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ssl-manager/logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/nginx
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ssl-manager/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ssl-manager/data/grafana
